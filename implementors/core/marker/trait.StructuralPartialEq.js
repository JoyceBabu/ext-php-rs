(function() {var implementors = {};
implementors["ext_php_rs"] = [{"text":"impl&lt;Storage&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/bindings/struct.__BindgenBitfieldUnit.html\" title=\"struct ext_php_rs::bindings::__BindgenBitfieldUnit\">__BindgenBitfieldUnit</a>&lt;Storage&gt;","synthetic":false,"types":["ext_php_rs::bindings::__BindgenBitfieldUnit"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.ZvalTypeFlags.html\" title=\"struct ext_php_rs::php::flags::ZvalTypeFlags\">ZvalTypeFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::ZvalTypeFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.ClassFlags.html\" title=\"struct ext_php_rs::php::flags::ClassFlags\">ClassFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::ClassFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.MethodFlags.html\" title=\"struct ext_php_rs::php::flags::MethodFlags\">MethodFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::MethodFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.PropertyFlags.html\" title=\"struct ext_php_rs::php::flags::PropertyFlags\">PropertyFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::PropertyFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.ConstantFlags.html\" title=\"struct ext_php_rs::php::flags::ConstantFlags\">ConstantFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::ConstantFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.GlobalConstantFlags.html\" title=\"struct ext_php_rs::php::flags::GlobalConstantFlags\">GlobalConstantFlags</a>","synthetic":false,"types":["ext_php_rs::php::flags::GlobalConstantFlags"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"ext_php_rs/php/flags/struct.ZendResult.html\" title=\"struct ext_php_rs::php::flags::ZendResult\">ZendResult</a>","synthetic":false,"types":["ext_php_rs::php::flags::ZendResult"]}];
implementors["proc_macro2"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"proc_macro2/enum.Delimiter.html\" title=\"enum proc_macro2::Delimiter\">Delimiter</a>","synthetic":false,"types":["proc_macro2::Delimiter"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"proc_macro2/enum.Spacing.html\" title=\"enum proc_macro2::Spacing\">Spacing</a>","synthetic":false,"types":["proc_macro2::Spacing"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()