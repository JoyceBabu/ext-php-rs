initSidebarItems({"attr":[["php_const","Attribute used to annotate constants to be exported to PHP."],["php_function","Attribute used to annotate a function as a PHP function."],["php_impl","Annotates a structs `impl` block, declaring that all methods and constants declared inside the `impl` block will be declared as PHP methods and constants."],["php_module","Annotates a function that will be used by PHP to retrieve information about the module."],["php_startup","Annotates a function that will be called by PHP when the module starts up. Generally used to register classes and constants."]],"derive":[["ZendObjectHandler","Derives the implementation of `ZendObjectOverride` for the given structure."]],"macro":[["call_user_func","Attempts to call a given PHP callable."],["info_table_end","Ends the PHP extension information table. Must be run after all rows have been inserted into the table."],["info_table_header","Sets the header for the PHP extension information table. Takes as many string arguments as required."],["info_table_row","Adds a row to the PHP extension information table. Takes as many string arguments as required."],["info_table_start","Starts the PHP extension information table displayed when running `phpinfo();` Must be run before rows are inserted into the table."],["parse_args","Parses a given list of arguments using the `ArgParser` class."],["throw","Throws an exception and returns from the current function."]],"mod":[["bindings","Raw FFI bindings to the PHP API."],["errors","Error and result types returned from the library functions."],["macros","Macros for interacting with PHP, mainly when the function takes variadic arguments. Unforutunately, this is the best way to handle these. Note that most of these will introduce unsafe into your code base."],["php","Objects relating to PHP and the Zend engine."],["prelude","A module typically glob-imported containing the typically required macros and imports."]]});